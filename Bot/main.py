from telebot import *
import sqlite3
import os
import bt

bot = telebot.TeleBot('BOT-KEY')

# –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –¥–æ –Ω–∞—à–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
dirname = os.path.dirname(__file__)
path = dirname + os.sep

# –í –º–æ–¥—É–ª–µ bt —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Å–µ –±–æ–ª—å—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
# —ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –Ω–µ—É–¥–æ–±–Ω—ã–º, –æ–¥–Ω–∞–∫–æ –Ω–∞–º–Ω–æ–≥–æ –Ω–µ—É–¥–æ–±–Ω–µ–µ
# —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è –≤ –æ–≥—Ä–æ–º–Ω–æ–º –∫–æ–¥–µ, –≥–¥–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Ç—Ä–æ–π–Ω—ã–º–∏ –∫–∞–≤—ã—á–∫–∞–º–∏
# –∏–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É —è –ø—Ä–∏–Ω—è–ª —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ

# –ó–∞—Ç–æ —Ç–µ–ø–µ—Ä—å –±–æ—Ç –≤—ã–≥–ª—è–¥–∏—Ç –æ—á–µ–Ω—å –∞–∫–∫—É—Ä–∞—Ç–Ω–æ :3
bt = bt.msg()



# markup —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—Å—Ç–æ
default_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

btn_add = types.KeyboardButton("‚öúÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É")
btn_remove = types.KeyboardButton("ü™ì –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É")
btn_list = types.KeyboardButton("üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä")
btn_author = types.KeyboardButton("üå± –û–± –∞–≤—Ç–æ—Ä–µ")

default_markup.add(btn_list)
default_markup.add(btn_add, btn_remove)
default_markup.add(btn_author)

# markup —Å inline-–∫–Ω–æ–ø–∫–æ–π '–û–±—Ä–∞—Ç–Ω–æ'
back_inline_markup = types.InlineKeyboardMarkup(row_width=1)
btn_back = types.InlineKeyboardButton(text="üî∫ –û–±—Ä–∞—Ç–Ω–æ –≤ –º–µ–Ω—é", callback_data='1')
back_inline_markup.add(btn_back)

# markup —Å inline-–∫–Ω–æ–ø–∫–æ–π '–û–±—Ä–∞—Ç–Ω–æ', –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä
back_togamelist_inline_markup = types.InlineKeyboardMarkup(row_width=1)
btn_back = types.InlineKeyboardButton(text="üî∫ –û–±—Ä–∞—Ç–Ω–æ –∫ —Å–ø–∏—Å–∫—É", callback_data='2')
back_togamelist_inline_markup.add(btn_back)

# –ü—É—Å—Ç–æ–π markup
empty_markup = types.ReplyKeyboardRemove()

# markup –≤—ã–±–æ—Ä–∞
choice_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_ok = types.KeyboardButton("ü™Ä –í—Å—ë –≤–µ—Ä–Ω–æ")
btn_change_name = types.KeyboardButton("üé£ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ")
btn_change_mark = types.KeyboardButton("üèπ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
btn_change_comment = types.KeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

choice_markup.add(btn_ok)
choice_markup.add(btn_change_name, btn_change_mark)
choice_markup.add(btn_change_comment)

# markup —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
gamelist_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

btn_check_com = types.KeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤ –æ–± –∏–≥—Ä–µ")
btn_back = types.KeyboardButton("üî∫ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")

gamelist_markup.add(btn_check_com, btn_back)

# markup –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∏–≥—Ä–µ (–≤—ã—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–∑—ã–≤–∞ –æ–± –∏–≥—Ä–µ)
change_mark_or_comment_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

btn_change_mark = types.KeyboardButton("üèπ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É")
btn_change_comment = types.KeyboardButton("üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")

change_mark_or_comment_markup.add(btn_change_mark, btn_change_comment)

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã markup
deletegame_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn_yes = types.KeyboardButton("ü™ì –£–¥–∞–ª–∏—Ç—å")
deletegame_markup.add(btn_yes)



# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def init(id):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()

    # –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç—É
    cursor.execute("""CREATE TABLE IF NOT EXISTS ids(id INTEGER, db_name TEXT)""")
    connect.commit()

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –∏–≥—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç—É
    table_id = "table_" + str(id)
    cursor.execute(f"CREATE TABLE IF NOT EXISTS {table_id}(game_name TEXT, game_score INTEGER, game_comment TEXT)")
    connect.commit()

    # –°–≤—è–∑—ã–≤–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ id —Ç–∞–±–ª–∏—Ü—ã –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –±–¥
    # –µ—Å–ª–∏ —ç—Ç–æ–≥–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–Ω–æ
    cursor.execute(f"SELECT id FROM ids WHERE id={id}")
    data = cursor.fetchone()
    if data is None:
        new_user = [id, table_id]
        cursor.execute("INSERT INTO ids VALUES(?,?)", new_user)
        connect.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def getUserTable(userid):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()

    cursor.execute(f"SELECT db_name FROM ids WHERE id = ?", (userid,))
    return cursor.fetchone()[0]

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
def addNewGame(userid, gameInfo):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()

    usertable = getUserTable(userid)
    cursor.execute(f"INSERT INTO {usertable} VALUES(?,?,?)", gameInfo)
    connect.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞
def deleteGame(userid, gameName):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()
    table = getUserTable(userid)

    cursor.execute(f"DELETE FROM {table} WHERE game_name = ?", (gameName, ))
    connect.commit()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —É–¥–æ–±–Ω–æ–π —Ñ–æ—Ä–º–µ
def getGameList(userid):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()
    table = getUserTable(userid)

    cursor.execute(f"SELECT * FROM {table}")
    records = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è
    # –ù–ê–ó–í–ê–ù–ò–ï–ò–ì–†–´:–û–¶–ï–ù–ö–ê - –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å, —Ç–∏–ø str
    gameList = []
    for row in records:
        newStr = row[0] + ":" + str(row[1])
        gameList.append(newStr)
    
    return gameList

# –ü–æ–ª—É—á–∞–µ–º –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
# –ù–ê–ó–í–ê–ù–ò–ï–ò–ì–†–´:–û–¶–ï–ù–ö–ê:–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô
# –ü–æ –µ—ë –Ω–æ–º–µ—Ä—É –≤ —Å–ø–∏—Å–∫–µ
def getGameInfo(userid, gameid):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫—É
    gameList = getGameList(userid)
    gameString = gameList[int(gameid)-1] + ":" + getComment(userid, gameid)
    return gameString.split(":")

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ –ø–æ—Ä—è–¥–∫—É
def getAllComments(userid):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()
    table = getUserTable(userid)

    cursor.execute(f"SELECT * FROM {table}")
    records = cursor.fetchall()

    commentsList = []
    for row in records:
        commentsList.append(row[2])

    return commentsList

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
def getComment(userid, gameid):
    return getAllComments(userid)[int(gameid)-1]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–º–µ–Ω–∏ –∏–≥—Ä—ã
def isUnique(userid, gamename):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()
    table = getUserTable(userid)

    cursor.execute(f"SELECT game_score FROM {table} WHERE game_name = ?", (gamename,))
    record = cursor.fetchone()
    
    # –ï—Å–ª–∏ record = none - –∑–Ω–∞—á–∏—Ç —Ç–∞–∫–æ–π –∏–≥—Ä—ã –µ—â—ë –Ω–µ—Ç—É –≤ —Å–ø–∏—Å–∫–µ
    # –ï—Å–ª–∏ –∂–µ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –∏–≥—Ä–∞ —É–∂–µ –µ—Å—Ç—å
    if record is None:
        return True
    else:
        return False
    
# –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∏–≥—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞
def updateGameMark(userid, gamename, mark):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()
    table = getUserTable(userid)

    cursor.execute(f"UPDATE {table} SET game_score = ? WHERE game_name = ?", (mark, gamename))
    connect.commit()

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–≥—Ä–µ –∏–∑ —Å–ø–∏—Å–∫–∞
def updateGameComment(userid, gamename, comment):
    connect = sqlite3.connect(path + 'users.db')
    cursor = connect.cursor()
    table = getUserTable(userid)

    cursor.execute(f"UPDATE {table} SET game_comment = ? WHERE game_name = ?", (comment, gamename))
    connect.commit()






# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@bot.message_handler(commands=['start'])
def hello(message):
    # –°–æ–∑–¥–∞—ë–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    # + —Å–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–Ω–æ—Å–∏–º –µ–≥–æ –≤ –¥–±
    init(message.chat.id)
    bot.send_message(message.from_user.id, bt.startMessage, reply_markup=default_markup)
    
# Inilne-–∫–Ω–æ–ø–∫–∞ –û–±—Ä–∞—Ç–Ω–æ
@bot.callback_query_handler(func=lambda call: True)
def back(message):
    if message.data == '1':
        bot.send_message(message.from_user.id, bt.backMessage, reply_markup=default_markup)
        bot.clear_step_handler_by_chat_id(chat_id = message.from_user.id)
    elif message.data == '2':
        gameList = getGameList(message.from_user.id)
        bot.send_message(message.from_user.id, bt.gameListMessage(gameList), reply_markup=gamelist_markup)
        bot.clear_step_handler_by_chat_id(chat_id = message.from_user.id)



# –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
@bot.message_handler(content_types=["text"])
def text_message(message):
    # –ö–Ω–æ–ø–∫–∞ –æ–± –∞–≤—Ç–æ—Ä–µ
    if message.text == "üå± –û–± –∞–≤—Ç–æ—Ä–µ":
        bot.send_message(message.from_user.id, bt.authorMessage, reply_markup=empty_markup)
        bot.send_photo(message.from_user.id, open(path + "photo.jpg", 'rb'), reply_markup=back_inline_markup)

    # –ö–Ω–æ–ø–∫–∞ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
    elif message.text == "üìú –°–ø–∏—Å–æ–∫ –∏–≥—Ä":
        gameList = getGameList(message.from_user.id)
        bot.send_message(message.from_user.id, bt.gameListMessage(gameList), reply_markup=gamelist_markup)

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é
    elif message.text == "üî∫ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        bot.send_message(message.from_user.id, bt.startContinueMessage, reply_markup=default_markup)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
    elif message.text == "‚öúÔ∏è –î–æ–±–∞–≤–∏—Ç—å –∏–≥—Ä—É":
        bot.send_message(message.chat.id,"–û—Ç–ª–∏—á–Ω–æ!", reply_markup=empty_markup)
        bot.send_message(message.from_user.id, bt.addGameMessage, reply_markup = back_inline_markup)
        bot.register_next_step_handler(message, nsAddGame)

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
    elif message.text == "ü™ì –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É":
        gameList = getGameList(message.from_user.id)
        gameListLen = len(gameList)
        if gameListLen > 1:
            gameList = getGameList(message.from_user.id)
            bot.send_message(message.from_user.id, bt.gameListMessage(gameList), reply_markup=empty_markup)
            bot.send_message(message.from_user.id, bt.whichGameWeDelete(gameListLen), reply_markup=back_inline_markup)
            bot.register_next_step_handler(message, nsDeleteGame, gameList)
        elif gameListLen == 1:
            gameName = gameList[0].split(':')[0]

            bot.send_message(message.from_user.id, "üé≤ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É " + gameName + "?", reply_markup=deletegame_markup)
            bot.send_message(message.from_user.id, bt.ifYesSend1Message, reply_markup=back_inline_markup)
            bot.register_next_step_handler(message, nsDelete1Game, gameName)
        else:
            bot.send_message(message.from_user.id, bt.youNotHaveGamesToDeleteMessage, reply_markup=default_markup)

    # –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–∞ –æ–± –∏–≥—Ä–µ
    elif message.text == "üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤ –æ–± –∏–≥—Ä–µ":
        gameListLen = len(getGameList(message.from_user.id))
        if gameListLen > 1:
            bot.send_message(message.from_user.id,"–ë–µ–∑ –ø—Ä–æ–±–ª–µ–º", reply_markup=empty_markup)
            gameList = getGameList(message.from_user.id)
            bot.send_message(message.from_user.id, bt.whichGameToSeeComment(gameList), reply_markup = back_togamelist_inline_markup)
            bot.register_next_step_handler(message, nsCheckComment)
        elif gameListLen == 1:
            bot.send_message(message.from_user.id, "üé≤ –í–æ—Ç –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=change_mark_or_comment_markup)
            bot.send_message(message.from_user.id, getComment(message.from_user.id, '1'), reply_markup=back_togamelist_inline_markup)
            bot.register_next_step_handler(message, nsAfterComment, '1')
        else:
            # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã –≤ —Å–ø–∏—Å–∫–µ
            # –ó–Ω–∞—á–∏—Ç –æ–Ω –∏ –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã
            bot.send_message(message.from_user.id, bt.startTimeToAddMessage(), reply_markup=default_markup)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –∫—É—Ä–∞–ª–µ—Å–∏—Ü—É
    else:
        bot.send_message(message.from_user.id, bt.wtfMessage, reply_markup=default_markup)




# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è bot.register_next_step_handler

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä–µ
def nsAddGame(message):
    # !!! gameInfo - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ
    # –Ω–∞ –º–æ–º–µ–Ω—Ç —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if isUnique(message.from_user.id, message.text):
        gameInfo = [message.text]
        bot.send_message(message.from_user.id, bt.whatMarkMessage(gameInfo), reply_markup = back_inline_markup)
        bot.register_next_step_handler(message, nsAddMark, gameInfo)
    else:
        # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —Ç–∞–∫–æ–µ –∏–º—è –∏–≥—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
        bot.send_message(message.from_user.id, "üé≤ –Ø –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ!")
        bot.send_message(message.from_user.id, bt.addGameMessageNotUniqueName, reply_markup = back_inline_markup)
        bot.register_next_step_handler(message, nsAddGame)

# –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∏–≥—Ä–µ
def nsAddMark(message, gameInfo):
    # –ù–∞ –º–æ–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —É –Ω–∞—Å –µ—Å—Ç—å —É–∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ—Ü–µ–Ω–∫–∞ –∏–≥—Ä—ã
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–≤—ë–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∫—É –æ—Ç 1-10
    if message.text in ['1','2','3','4','5','6','7','8','9','10']:
        gameInfo.append(message.text)
        bot.send_message(message.from_user.id, bt.whatCommentMessage(gameInfo), reply_markup = back_inline_markup)
        bot.register_next_step_handler(message, nsAddComment, gameInfo)
    else:
        bot.send_message(message.from_user.id, bt.whatMarkMessage2(gameInfo), reply_markup = back_inline_markup)
        bot.register_next_step_handler(message, nsAddMark, gameInfo)

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–≥—Ä–µ
def nsAddComment(message, gameInfo):
    # –≠—Ç–æ –∑–∞–≤–µ—Ä—à–∞—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä—ã, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–∑—ã–≤
    gameInfo.append(message.text)
    bot.send_message(message.from_user.id, bt.fullGameInfoMessage(gameInfo), reply_markup = back_inline_markup)
    bot.send_message(message.from_user.id, '''üé≤ –í—Å—ë –≤–µ—Ä–Ω–æ?''', reply_markup=choice_markup)
    bot.register_next_step_handler(message, nsFinallyAddGame, gameInfo)

# –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –º—ã –µ–≥–æ –ø–æ–Ω—è–ª–∏
def nsFinallyAddGame(message, gameInfo):
    # –ó–¥–µ—Å—å, –µ—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, –º—ã —É–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É –≤ —Ç–∞–±–ª–∏—Ü—É
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, —Ç–æ –º–µ–Ω—è–µ–º –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –∫–∞–∫ –≤—Å—ë –±—É–¥–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ

    if (message.text == "ü™Ä –í—Å—ë –≤–µ—Ä–Ω–æ"):
        # –í—Å—ë –æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        addNewGame(message.chat.id, gameInfo)
        bot.send_message(message.from_user.id, bt.weAddGameWhatNextMessage, reply_markup=default_markup)
        
    elif (message.text == "üé£ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"):
        bot.send_message(message.chat.id, "ü¶¥ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –∫–æ–∂–∞–Ω—ã–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ", reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsChangeGame, gameInfo)

    elif (message.text == "üèπ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É"):
        bot.send_message(message.chat.id, "ü¶¥ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –∫–æ–∂–∞–Ω—ã–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã (–æ—Ç 1 –¥–æ 10): ", reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsChangeMark, gameInfo)

    elif (message.text == "üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"):
        bot.send_message(message.chat.id, "ü¶¥ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –∫–æ–∂–∞–Ω—ã–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∏–≥—Ä—ã: ", reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsChangeComment, gameInfo)

    else:
        # –±–æ—Ç —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, —Å–Ω–æ–≤–∞ –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π
        bot.send_message(message.from_user.id, bt.fullGameInfoMessage(gameInfo), reply_markup = back_inline_markup)
        bot.send_message(message.from_user.id, bt.allrightAndWtfMessage, reply_markup=choice_markup)
        bot.register_next_step_handler(message, nsFinallyAddGame, gameInfo)

# –ú–µ–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
def nsChangeGame(message, gameInfo):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    if isUnique(message.from_user.id, message.text):
        gameInfo[0] = message.text
        bot.send_message(message.from_user.id, bt.fullGameInfoMessage(gameInfo), reply_markup = back_inline_markup)
        bot.send_message(message.from_user.id, '''üé≤ –í—Å—ë –≤–µ—Ä–Ω–æ?''', reply_markup=choice_markup)
        bot.register_next_step_handler(message, nsFinallyAddGame, gameInfo)
    else:
        bot.send_message(message.from_user.id, "üé≤ –¢–∞–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã —É–∂–µ –µ—Å—Ç—å –≤ —Ç–≤–æ—ë–º —Å–ø–∏—Å–∫–µ!")
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã: ", reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsChangeGame, gameInfo)

# –ú–µ–Ω—è–µ–º –æ—Ü–µ–Ω–∫—É
def nsChangeMark(message, gameInfo):
    if message.text in ['1','2','3','4','5','6','7','8','9','10']:
        gameInfo[1] = message.text
        bot.send_message(message.from_user.id, bt.fullGameInfoMessage(gameInfo), reply_markup = back_inline_markup)
        bot.send_message(message.from_user.id, '''üé≤ –í—Å—ë –≤–µ—Ä–Ω–æ?''', reply_markup=choice_markup)
        bot.register_next_step_handler(message, nsFinallyAddGame, gameInfo)
    else:
        bot.send_message(message.chat.id, "ü¶¥ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —á—Ç–æ —Ç—ã –∫–∞–∫ –Ω–µ —Ä–æ–¥–Ω–æ–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã (–æ—Ç 1 –¥–æ 10): ", reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsChangeMark, gameInfo)

# –ú–µ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
def nsChangeComment(message, gameInfo):
    gameInfo[2] = message.text
    bot.send_message(message.from_user.id, bt.fullGameInfoMessage(gameInfo), reply_markup = back_inline_markup)
    bot.send_message(message.from_user.id, '''üé≤ –í—Å—ë –≤–µ—Ä–Ω–æ?''', reply_markup=choice_markup)
    bot.register_next_step_handler(message, nsFinallyAddGame, gameInfo)

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
def nsCheckComment(message):
    gameList = getGameList(message.from_user.id)
    gameAmount = len(gameList)
    userChoice = message.text

    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –æ—Ç 1 –¥–æ –∫–æ–ª-–≤–∞ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    rightValues = []
    while gameAmount != 0:
        rightValues.append(str(gameAmount))
        gameAmount = gameAmount - 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø–∏—Å–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å—é–¥–∞ –∂–µ
    if userChoice in rightValues:
        bot.send_message(message.from_user.id, "üé≤ –í–æ—Ç –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=change_mark_or_comment_markup)
        bot.send_message(message.from_user.id, getComment(message.from_user.id, userChoice), reply_markup=back_togamelist_inline_markup)
        bot.register_next_step_handler(message, nsAfterComment, userChoice)
    else:
        bot.send_message(message.from_user.id, bt.whichGameToSeeComment2(gameList), reply_markup = back_togamelist_inline_markup)
        bot.register_next_step_handler(message, nsCheckComment)

# –ü–æ—Å–ª–µ –≤—ã–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∏–≥—Ä–µ –∂–¥—ë–º, —á—Ç–æ –Ω–∞–ø–∏—à–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def nsAfterComment(message, gameid):
    gameInfo = getGameInfo(message.from_user.id, gameid)

    if message.text == "üèπ –ò–∑–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É":
        bot.send_message(message.chat.id, "ü¶¥ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –∫–æ–∂–∞–Ω—ã–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã (–æ—Ç 1 –¥–æ 10): ", reply_markup=back_togamelist_inline_markup)
        bot.register_next_step_handler(message, nsChangeMarkOldGame, gameInfo)
    
    elif message.text == "üé≠ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        bot.send_message(message.chat.id, "ü¶¥ –ë–µ–∑ –ø—Ä–æ–±–ª–µ–º, –∫–æ–∂–∞–Ω—ã–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≥—Ä–µ: ", reply_markup=back_togamelist_inline_markup)
        bot.register_next_step_handler(message, nsChangeCommentOldGame, gameInfo)

    # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ—è—Å–Ω–æ–µ
    else:
        bot.send_message(message.from_user.id, "üé≤ –í–æ—Ç –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:", reply_markup=change_mark_or_comment_markup)
        bot.send_message(message.from_user.id, getComment(message.from_user.id, gameid), reply_markup=back_togamelist_inline_markup)
        bot.register_next_step_handler(message, nsAfterComment, gameid)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã
def nsChangeMarkOldGame(message, gameInfo):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    if message.text in ['1','2','3','4','5','6','7','8','9','10']:
        updateGameMark(message.from_user.id, gameInfo[0], int(message.text))
        bot.send_message(message.chat.id, "üé≤ –û—Ü–µ–Ω–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!", reply_markup=empty_markup)

        gameList = getGameList(message.from_user.id)
        bot.send_message(message.from_user.id, bt.gameListMessage(gameList), reply_markup=gamelist_markup)
    else:
        bot.send_message(message.chat.id, "ü¶¥ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —á—Ç–æ —Ç—ã –∫–∞–∫ –Ω–µ —Ä–æ–¥–Ω–æ–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, "üíÄ –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–æ–≤—É—é –æ—Ü–µ–Ω–∫—É –∏–≥—Ä—ã (–æ—Ç 1 –¥–æ 10): ", reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsChangeMarkOldGame, gameInfo)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã
def nsChangeCommentOldGame(message, gameInfo):
    updateGameComment(message.from_user.id, gameInfo[0], message.text)
    bot.send_message(message.chat.id, "üé≤ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑–º–µ–Ω—ë–Ω!", reply_markup=empty_markup)

    gameList = getGameList(message.from_user.id)
    bot.send_message(message.from_user.id, bt.gameListMessage(gameList), reply_markup=gamelist_markup)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
def nsDeleteGame(message, gameList):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∑–Ω–∞—á–µ–Ω–∏–µ
    gameListLen = len(gameList)

    rightValues = []
    while gameListLen != 0:
        rightValues.append(str(gameListLen))
        gameListLen = gameListLen - 1

    if message.text in rightValues:
        gameNumber = int(message.text)
        gameName = gameList[gameNumber-1].split(":")[0]
        deleteGame(message.from_user.id, gameName)

        bot.send_message(message.chat.id, "üé≤ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", reply_markup=empty_markup)
        # –û–±–Ω–æ–≤–ª—è–µ–º gameList –∏ –≤—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        gameList = getGameList(message.from_user.id)
        bot.send_message(message.from_user.id, bt.gameListMessage(gameList), reply_markup=gamelist_markup)
    else:
        bot.send_message(message.chat.id, "ü¶¥ –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, —á—Ç–æ —Ç—ã –∫–∞–∫ –Ω–µ —Ä–æ–¥–Ω–æ–π", reply_markup=empty_markup)
        bot.send_message(message.chat.id, bt.whichGameWeDeleteNotRightValue(len(gameList)), reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsDeleteGame, gameList)

# –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã, –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∏–≥—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ
def nsDelete1Game(message, gameName):
    if message.text == "ü™ì –£–¥–∞–ª–∏—Ç—å":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã, —Ç–æ –≤–≤–µ–¥—ë—Ç –∏–º–µ–Ω–Ω–æ —ç—Ç–æ
        deleteGame(message.from_user.id, gameName)
        bot.send_message(message.from_user.id, bt.weDeleteGameWhatNextMessage, reply_markup=default_markup)
    else:
        # –û–ø—è—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–≤—Ä–∞–∑—É–º–∏—Ç–µ–ª—å–Ω–æ–µ
        bot.send_message(message.from_user.id, "üé≤ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É " + gameName + "?", reply_markup=deletegame_markup)
        bot.send_message(message.from_user.id, bt.ifYesSend1MessageAgain, reply_markup=back_inline_markup)
        bot.register_next_step_handler(message, nsDelete1Game, gameName)

bot.polling(none_stop=True, interval=0)
